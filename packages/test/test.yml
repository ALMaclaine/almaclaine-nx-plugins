version: "1.0"
name: Swagger Petstore - OpenAPI 3.0
config:
  http:
    baseURL: https://petstore3.swagger.io/api/v3
tests:
  pet:
    name: Everything about your Pets
    steps:
      - id: updatePet
        name: Update an existing pet
        http:
          url: /pet
          method: PUT
          headers:
            Content-Type: application/json
            accept: application/json
          json:
            name: anim Duis
            photoUrls:
              - amet dolor occaecat
              - Ut nisi dolor incididunt non
              - id dolor quis culpa
              - incididunt
            category:
              id: 3013446
              name: consequat velit ullamco id ut
            id: -61245921
            tags:
              - name: Excepteur labore sint sit ex
                id: 57434519
                dolore_6ff: -92130837.8359778
                eu_287: -40853922
              - name: nisi adipisicing aliqua pariatur
                id: -14284912
              - id: -3400795
                name: fugiat aute labore tempor magna
                mollit5: -88155293.86176006
                ut_900: 44662880.658296615
                elit_9af: 85736596
                nullaaac: 48912436
                eiusmod7b_: 42543345.14165205
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/Pet"
      - id: addPet
        name: Add a new pet to the store
        http:
          url: /pet
          method: POST
          headers:
            Content-Type: application/json
            accept: application/json
          json:
            name: laboris pariatur
            photoUrls:
              - fugiat labore voluptate adipisicing magna
              - proident adipisicing ex
            id: 51086821
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/Pet"
      - id: findPetsByStatus
        name: Finds Pets by status
        http:
          url: /pet/findByStatus
          method: GET
          params:
            status: available
          check:
            status: 200
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Pet"
      - id: findPetsByTags
        name: Finds Pets by tags
        http:
          url: /pet/findByTags
          method: GET
          params:
            tags:
              - dolor aliquip et
          check:
            status: 200
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Pet"
      - id: getPetById
        name: Find pet by ID
        http:
          url: /pet/-26319283
          method: GET
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/Pet"
      - id: updatePetWithForm
        name: Updates a pet in the store with form data
        http:
          url: /pet/83231420
          method: POST
          params:
            name: occaecat in ullamco consectetur tempor
            status: consectetur
      - id: deletePet
        name: Deletes a pet
        http:
          url: /pet/86464817
          method: DELETE
          headers:
            api_key: ex
      - id: uploadFile
        name: uploads an image
        http:
          url: /pet/62852084/uploadImage
          method: POST
          params:
            additionalMetadata: adipisicing in et ipsum esse
          headers:
            Content-Type: application/octet-stream
          body:
            file: file.txt
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/ApiResponse"
  store:
    name: Access to Petstore orders
    steps:
      - id: getInventory
        name: Returns pet inventories by status
        http:
          url: /store/inventory
          method: GET
          check:
            status: 200
            schema:
              type: object
              additionalProperties:
                type: integer
                format: int32
      - id: placeOrder
        name: Place an order for a pet
        http:
          url: /store/order
          method: POST
          headers:
            Content-Type: application/json
            accept: application/json
          json:
            id: 73559514
            status: placed
            shipDate: "2021-11-13T02:14:28.0Z"
            complete: true
            quantity: -83855259
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/Order"
      - id: getOrderById
        name: Find purchase order by ID
        http:
          url: /store/order/22917977
          method: GET
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/Order"
      - id: deleteOrder
        name: Delete purchase order by ID
        http:
          url: /store/order/-99272210
          method: DELETE
  user:
    name: Operations about user
    steps:
      - id: createUser
        name: Create user
        http:
          url: /user
          method: POST
          headers:
            Content-Type: application/json
            accept: application/json
          json:
            lastName: amet
            phone: dolor
            userStatus: -74133664
            commodo__d: false
            commodo78: -28161906.09127763
            temporaa: 90286889
            ex_6: false
      - id: createUsersWithListInput
        name: Creates list of users with given input array
        http:
          url: /user/createWithList
          method: POST
          headers:
            Content-Type: application/json
            accept: application/json
          json:
            - phone: eiusmod enim reprehenderit
              userStatus: -81332865
              password: aute
              email: dolore fugiat velit reprehenderit sint
              firstName: eiusmod id nisi ex cillum
              id: 71991233
              username: aliqua est pariatur enim sunt
              lastName: eiusmod eu mollit Excepteur
            - ex5b_: adipisicing ex incididunt velit
              ad3: 84626352
              aliqua_4e5: 35581145
              et_c: 99354033.06127676
              eiusmod_: 32278923.685803875
              sed_44b: false
              deserunt_2: true
            - password: occaecat ut laborum eu
              id: 74508448
              lastName: Excepteur minim qui
              username: anim aute enim sed
              phone: Ut culpa
              firstName: in minim aliqua cillum nulla
              email: nulla
              userStatus: -17937504
            - phone: pariatur consectetur magna sint ex
              username: ut irure nulla officia voluptate
              email: dolor adipisicing
              password: voluptate labore laboris consequat commodo
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/User"
      - id: loginUser
        name: Logs user into the system
        http:
          url: /user/login
          method: GET
          params:
            username: irure in adipisicing anim
            password: enim pariatur
          check:
            status: 200
            schema:
              type: string
      - id: logoutUser
        name: Logs out current logged in user session
        http:
          url: /user/logout
          method: GET
      - id: getUserByName
        name: Get user by user name
        http:
          url: /user/sit laborum
          method: GET
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/User"
      - id: updateUser
        name: Update user
        http:
          url: /user/culpa aliqua veniam
          method: PUT
          headers:
            Content-Type: application/json
            accept: application/json
          json:
            firstName: proident commodo laborum minim
            lastName: laborum proident ad mollit
            username: ut in ad proident Excepteur
            email: do ea
            password: adipisicing proident in
            userStatus: -9874073
            id: 89207047
            phone: cupidatat aliquip incididunt aute
      - id: deleteUser
        name: Delete user
        http:
          url: /user/ut exercitation culpa
          method: DELETE
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: "#/components/schemas/Address"
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
